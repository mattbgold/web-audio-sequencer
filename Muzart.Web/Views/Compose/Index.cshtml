@{
    ViewBag.Title = "Index";
}

@Styles.Render("~/Content/Muzart/muzartcompose")



<div class="player row">
    <div class="col-md-12">
        <div class="input-group input-group-lg bpm pull-left">
            <span class="input-group-addon" id="sizing-addon1">BPM</span>
            <input type="number" data-bind="value: player.bpm" class="form-control" placeholder="Enter a number" aria-describedby="sizing-addon1">
        </div>
        <div class="btn-group player-buttons" role="group" aria-label="...">
            <button type="button" class="btn btn-lg btn-default btn-play" data-bind="click: playToggle"><i class="fa" data-bind="css: { 'fa-play': !player.isPlaying(), 'fa-pause': player.isPlaying() }"></i></button>
            <button type="button" class="btn btn-lg btn-default" data-bind="click: player.stop"><i class="fa fa-fw fa-stop"></i></button>
            <button type="button" class="btn btn-lg btn-default" data-bind="click: player.loopToggle, css: {active: player.doLoop}"><i class="fa fa-fw fa-repeat"></i></button>
        </div>
        <!-- TODO: Clean up the timer -->
        <span class="timer" data-bind="text: Math.ceil(player.t() / pianoRoll.baseNotesToMakeQuarterNote / 4)"></span>
        <span class="timer">:</span>
        <span class="timer" data-bind="text: ((Math.ceil(player.t() / pianoRoll.baseNotesToMakeQuarterNote))%4) || 4"></span>
        <div class="pull-right">
            <select class="form-control form-reset" data-bind="options: midiFiles, value: selectedMidiFile"></select>
            <button class="btn btn-default" data-bind="click: function(){loadMidiFile($root.getMidiFileId($root.selectedMidiFile()));}">Load Midi</button>
        </div>
    </div>

</div>
<div class="row roll-header" data-bind="visible: showPianoRoll">
    <div class="col-xs-12">
        <button class="btn btn-success" data-bind="click:saveRoll"><i class="fa fa-check"></i> Done Editing</button>
        Grid Snap:
        <select class="form-control form-reset" data-bind="options: pianoRoll.snapWidths, value: pianoRoll.gridState.snapMode, optionsText: 'text', optionsValue: 'value'"></select>
    </div>
</div>

<!--Snap Width: <span data-bind="text:snapLengthText"></span>
    <input class="" type="range" min="3" max="5" data-bind="value: gridState.snapMode" /> -->


<div id="composition">
    <div class="row tracks-container">
        <div class="col-xs-2 col-reset">
            <div class="tracks-header">
                <input class="zoomrange" type="range" min="1" max="6" step="0.5" data-bind="value: gridState.zoomLevel, valueUpdate: 'input'" />
            </div>
            <section data-bind="foreach: tracks, selectGridSortable: tracks">
                <div class="instrument">
                    <button class="btn btn-link" data-bind="click: $parent.removeTrack, disable: $parent.tracks().length === 1"><i class="fa fa-remove"></i></button>
                    <div class="btn-group" role="group" aria-label="...">
                        <button type="button" class="btn btn-xs btn-default" data-bind="click: soloToggle, css: {active: solo}"><i class="fa fa-fw fa-headphones"></i></button>
                        <button type="button" class="btn btn-xs btn-default" data-bind="click: muteToggle, css: {active: mute}"><i class="fa fa-fw fa-volume-off"></i></button>
                    </div>
                    <span class="pull-right" style="margin:5px;">
                        <i class="fa fa-fw fa-volume-down"></i>
                        <input type="range" class="form-reset" style="vertical-align:middle;" min="0" max="1" step="any" data-bind="value:volume, valueUpdate: 'input'" />
                        <i class="fa fa-fw fa-volume-up"></i>
                    </span>
                    <select class="form-control" data-bind="options: $root.instruments, value: instrument"></select>
                </div>
            </section>
        </div>
        <div class="col-xs-10 col-reset">
            <div class="tracks-header"></div>
            <div class="canvasgrid" oncontextmenu="return false;">
                <div class="cursor" data-bind="style: { left: player.t()*gridState.gridBaseWidth() + 'px' }"></div>
                <!-- ko foreach: tracks -->
                <div class="shelf" data-bind="event: { mousedown: $root.trackClicked }, contextMenu: $root.getGridActions"></div>
                <!-- /ko -->
                <!-- ko foreach: canvases -->
                <div class="canvas" data-bind="selectGridElement: $root.gridState.gridSnapWidth, css: { 'is-selected': isSelected }, dblClick: $root.loadedCanvas, contextMenu: $root.getElementActions">
                    <button class="btn btn-sm btn-link btn-canvas-edit" data-bind="click: $root.loadedCanvas"><i class="fa fa-pencil"></i></button>
                    <svg height="100%" width="100%">
                        <!-- ko foreach: notesToDraw -->
                        <line style="stroke:rgb(150,150,150);stroke-width:2" data-bind="attr: { x1: ($data.on*$root.gridState.gridBaseWidth())+'px', x2: (($data.on+$data.len)*$root.gridState.gridBaseWidth())+'px', y1:($data.top/108)*100 + '%',y2:($data.top/108)*100 + '%'  }" />
                        <!-- /ko -->
                    </svg>
                </div>
                <!-- /ko -->
                <div class="box-select" data-bind="boxSelect: selection.onBoxSelect"></div>
            </div>
        </div>
    </div>
    <button class="btn btn-default" data-bind="click: addTrack"><i class="fa fa-plus"></i> Add Track</button>
</div>
<piano-roll style="display:none;" id="rollcomponent" params="model: $root.pianoRoll"></piano-roll>

<!--<div data-bind="dialog: {}, dialogVisible: showPianoRoll"><piano-roll id="rollcomponent" params="model: $root.pianoRoll"></piano-roll></div>-->

@section Scripts {
    @Scripts.Render("~/bundles/midi")
    @Scripts.Render("~/bundles/muzartcompose")
    <script>
    //TODO: move all piano roll stuff into Piano roll component
    $(function () {
        $.ajax({
            method: 'GET',
            url: '/api/midi/'
        }).done(function (data) {
            viewModel.midiFiles(data);
        });

        $(document).mousedown(function (e) {
            if (e.which === 3) Muzart.inputs.mouseRight = true;
            if (e.which === 1) Muzart.inputs.mouseLeft = true;
        });
        $(document).mouseup(function (e) {
            if (e.which === 3) Muzart.inputs.mouseRight = false;
            if (e.which === 1) Muzart.inputs.mouseLeft = false;
        });
        $(document).on('keyup keydown', function (e) { Muzart.inputs.shift(e.shiftKey); });
        $(document).on('keyup keydown', function (e) { Muzart.inputs.ctrl(e.ctrlKey); });
        $(document).on('keyup keydown', function (e) { Muzart.inputs.alt(e.altKey); });

        $(document).bind('keydown', 'ctrl+a', viewModel.selectAll);
        $(document).bind('keydown', 'ctrl+d', viewModel.deselectAll);
        $(document).bind('keydown', 'del', viewModel.deleteSelection);
        $(document).bind('keydown', 'backspace', viewModel.deleteSelection);
        $(document).bind('keydown', 'ctrl+c', viewModel.copySelection);
        $(document).bind('keydown', 'ctrl+x', viewModel.cutSelection);
        $(document).bind('keydown', 'ctrl+v', viewModel.pasteSelection);
        $(document).bind('keydown', 'space', viewModel.playToggle);

        try
        {
            MIDI.loadPlugin({
                soundfontUrl: '@Url.Content("~/Content/Muzart/soundfont/")',
                instruments: ["acoustic_grand_piano"],
                onprogress: function (state, progress) {
                    console.log(state, progress);
                },
                onsuccess: function () {
                    viewModel.midiLoaded(true);
                }
            });
        }
        catch (err) { }
    });

    function loadMidiFile(id) {
        id = id || 0;

        viewModel.player.stop();
        viewModel.canvases([]);
        viewModel.tracks([]);

        $.ajax({
            method: 'GET',
            url: 'api/midi/'+id
        }).done(function(data) {
            player = MIDI.Player;
            player.timeWarp = 1;
            player.loadFile('data:audio/midi;base64,' + data,
            function () {
                //alert('loaded');
                var offset = 0;
                var currentTime = 0;
                var queuedTime = 0;
                var muzartNotes = [];
                //var initialTempoSet = undefined;
                for (var i = 0; i < player.data.length; i++) {
                    var obj = player.data[i];
                    if ((queuedTime += obj[1]) <= currentTime) {
                        offset = queuedTime;
                        continue;
                    }
                    currentTime = queuedTime - offset;
                    var event = obj[0].event;
                    if (event.type !== 'channel') {
                        if (event.type === 'meta') {
                            //console.log(event);
                            if (event.subtype === 'setTempo') {
                               // var bpm = Math.round(60000000 / event.microsecondsPerBeat);
                                //TODO: figure out bpm once we can automate it. Be careful becayse bpm determines note length below

                                //viewModel.player.bpm(bpm);
                                //if(!initialTempoSet)
                                //initialTempoSet = bpm;
                            }
                            continue;
                        }
                    }

                    var queueTime = queuedTime - offset;
                    var track = obj[0].track; //TODO: differentiate between tracks and channels!
                    var channel = event.channel;
                    if (!muzartNotes[channel]) {
                        muzartNotes[channel] = [];
                    }
                    if (!muzartNotes[channel][track]) {
                        muzartNotes[channel][track] = [];
                    }

                    //TODO: noteOn and noteOff are BOTH afected by the BPM. when importing, we have to keep track of ALL bpm changes and set noteOn/Off accordingly keeping the bpm constant when determinnig note length and positioin
                    switch (event.subtype) {
                        case 'noteOn':
                            muzartNotes[channel][track].push(new Muzart.Note(108 - event.noteNumber, (queueTime / 1000) * (viewModel.pianoRoll.baseNotesToMakeQuarterNote) * (viewModel.player.bpm() / 60), -1, event.velocity));
                            break;
                        case 'noteOff':
                            for (var j = 0; j < muzartNotes[channel][track].length; j++) {
                                if (muzartNotes[channel][track][j].len === -1 && muzartNotes[channel][track][j].top === 108 - event.noteNumber) {
                                    muzartNotes[channel][track][j].len = ((queueTime / 1000) * (viewModel.pianoRoll.baseNotesToMakeQuarterNote) * (viewModel.player.bpm() / 60)) - muzartNotes[channel][track][j].on;
                                    break;
                                }
                            }
                            break;
                        default:
                            break;
                    }
                }

                for (var c1 = 0; c1 < muzartNotes.length; c1++) {
                    for (var c2 = 0; c2 < muzartNotes[channel].length; c2++) {
                        var trackNotes = muzartNotes[c1][c2];
                        //add a track if this channel/track has notes in it.
                        if (trackNotes) {
                            viewModel.addTrack();
                            //the note "on" are absolute, we need to make them relative to the canvas
                            var firstNoteOn = trackNotes[0].on;
                            //the start of the canvas needs to be at the beginning of a measure, so that the grid snap will be valid
                            var canvasStart = Math.floor(firstNoteOn / (4 * viewModel.pianoRoll.baseNotesToMakeQuarterNote)) * (4 * viewModel.pianoRoll.baseNotesToMakeQuarterNote);
                            var noteOffset = firstNoteOn - canvasStart;
                            for (var n in trackNotes) {
                                trackNotes[n].on += noteOffset - firstNoteOn; //make the notes relative to the canvas
                            }
                            var lastNote = trackNotes[trackNotes.length - 1];
                            var canvas = new Muzart.Canvas(
                                viewModel.tracks().length - 1,
                                canvasStart,
                                Math.ceil(lastNote.on + lastNote.len));
                            canvas.notes = trackNotes;
                            canvas.notesToDraw(trackNotes);
                            viewModel.canvases.push(canvas);
                        }
                    }
                }
            });
        });
    }

    var viewModel = new Muzart.ComposeModel();

    ko.applyBindings(viewModel);
    </script>
}
