@{
    ViewBag.Title = "Index";
}

@Styles.Render("~/Content/Muzart/muzartcompose")



<div class="player row">
    <div class="col-md-12">
        <div class="input-group input-group-lg bpm pull-left">
            <span class="input-group-addon" id="sizing-addon1">BPM</span>
            <input type="number" data-bind="value: player.bpm" class="form-control" placeholder="Enter a number" aria-describedby="sizing-addon1">
        </div>
        <div class="btn-group player-buttons" role="group" aria-label="...">
            <button type="button" class="btn btn-lg btn-default btn-play" data-bind="click: playToggle"><i class="fa" data-bind="css: { 'fa-play': !player.isPlaying(), 'fa-pause': player.isPlaying() }"></i></button>
            <button type="button" class="btn btn-lg btn-default" data-bind="click: player.stop"><i class="fa fa-fw fa-stop"></i></button>
            <button type="button" class="btn btn-lg btn-default" data-bind="click: player.loopToggle, css: {active: player.doLoop}"><i class="fa fa-fw fa-repeat"></i></button>  
        </div>  
        <span class="timer" data-bind="text: player.playTime"></span>
    </div>
    <div class="col-md-3">
        
    </div>  
</div>
<div class="row roll-header" data-bind="visible: showPianoRoll">
    <div class="col-xs-12">
        <button class="btn btn-success" data-bind="click:saveRoll"><i class="fa fa-check"></i> Done Editing</button>
        Grid Snap: 
        <select class="form-control form-reset" data-bind="options: pianoRoll.snapWidths, value: pianoRoll.gridState.snapMode, optionsText: 'text', optionsValue: 'value'"></select>
    </div>
</div>

<!--Snap Width: <span data-bind="text:snapLengthText"></span>
    <input class="" type="range" min="3" max="5" data-bind="value: gridState.snapMode" /> -->

    
<div id="composition">
    <div  class="row tracks-container">
        <div class="col-xs-2 col-reset">
            <div class="tracks-header">
                <input class="zoomrange" type="range" min="1" max="6" step="any" data-bind="value: gridState.zoomLevel, valueUpdate: 'input'" />
            </div>
            <!-- ko foreach: tracks -->
	        <div class="instrument">
                <button class="btn btn-link" data-bind="click: $parent.removeTrack" ><i class="fa fa-remove"></i></button>
                <div class="btn-group" role="group" aria-label="...">
                    <button type="button" class="btn btn-xs btn-default" data-bind="click: soloToggle, css: {active: solo}"><i class="fa fa-fw fa-headphones"></i></button>
                    <button type="button" class="btn btn-xs btn-default" data-bind="click: muteToggle, css: {active: mute}"><i class="fa fa-fw fa-volume-off"></i></button>
                </div>
                <select class="form-control" data-bind="options: $root.instruments, value: instrument"></select>
	        </div>
            <!-- /ko -->
        </div>
        <div class="col-xs-10 col-reset">
            <div class="tracks-header"></div>
            <div class="canvasgrid" oncontextmenu="return false;">
                <!-- ko foreach: tracks -->
	            <div class="shelf"></div>
                <!-- /ko -->
                <!-- ko foreach: canvases -->
                <div class="canvas" data-bind="selectGridElement: $root.gridState.gridSnapWidth, css: { 'is-selected': isSelected }, dblClick: $root.loadedCanvas, contextMenu: [{icon: 'fa-music', text: 'Example Action', handler: function(){}}, {icon: 'fa-trash', text: 'Another', handler: function(){}}]">
                    <button class="btn btn-sm btn-link btn-canvas-edit" data-bind="click: $root.loadedCanvas"><i class="fa fa-pencil"></i></button>
                    <svg height="100%" width="100%">
                        <!-- ko foreach: notesToDraw -->
                        <line style="stroke:rgb(150,150,150);stroke-width:2" data-bind="attr: { x1: ($data.on*$root.gridState.gridBaseWidth())+'px', x2: (($data.on+$data.len)*$root.gridState.gridBaseWidth())+'px', y1:($data.top/108)*100 + '%',y2:($data.top/108)*100 + '%'  }" /> 
                        <!-- /ko -->
                    </svg>
                </div>
                <!-- /ko -->
                <div class="box-select" data-bind="boxSelect: selection.onBoxSelect"></div>
            </div>
        </div>   
    </div>
    <button class="btn btn-default" data-bind="click: addTrack"><i class="fa fa-plus"></i> Add Track</button>
</div>
<piano-roll style="display:none;" id="rollcomponent" params="model: $root.pianoRoll"></piano-roll>

<!--<div data-bind="dialog: {}, dialogVisible: showPianoRoll"><piano-roll id="rollcomponent" params="model: $root.pianoRoll"></piano-roll></div>-->

@section Scripts {
    @Scripts.Render("~/bundles/midi")
    @Scripts.Render("~/bundles/muzartcompose")
<script>
    //TODO: move all piano roll stuff into Piano roll component
    $(function () {
        $(document).mousedown(function (e) {
            if (e.which === 3) Muzart.inputs.mouseRight = true;
            if (e.which === 1) Muzart.inputs.mouseLeft = true;
        });
        $(document).mouseup(function (e) {
            if (e.which === 3) Muzart.inputs.mouseRight = false;
            if (e.which === 1) Muzart.inputs.mouseLeft = false;
        });
        $(document).on('keyup keydown', function (e) { Muzart.inputs.shift(e.shiftKey); });
        $(document).on('keyup keydown', function (e) { Muzart.inputs.ctrl(e.ctrlKey); });
        $(document).on('keyup keydown', function (e) { Muzart.inputs.alt(e.altKey); });

        $(document).bind('keydown', 'ctrl+a', viewModel.selectAll);
        $(document).bind('keydown', 'ctrl+d', viewModel.deselectAll);
        $(document).bind('keydown', 'del', viewModel.deleteSelection);
        $(document).bind('keydown', 'backspace', viewModel.deleteSelection);
        $(document).bind('keydown', 'ctrl+c', viewModel.copySelection);
        $(document).bind('keydown', 'ctrl+x', viewModel.cutSelection);
        $(document).bind('keydown', 'ctrl+v', viewModel.pasteSelection);
        $(document).bind('keydown', 'space', viewModel.playToggle);

        try
        {
            MIDI.loadPlugin({
                soundfontUrl: '@Url.Content("~/Content/Muzart/soundfont/")',
                instrument: "acoustic_grand_piano", //acoustic_grand_piano
                onprogress: function (state, progress) {
                    console.log(state, progress);
                },
                onsuccess: function () {
                    viewModel.midiLoaded(true);
                }
            });
        }
        catch (err) { }
    });
    var viewModel = new Muzart.ComposeModel();

    ko.applyBindings(viewModel);
</script>
}
