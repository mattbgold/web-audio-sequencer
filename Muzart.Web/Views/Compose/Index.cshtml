@{
    ViewBag.Title = "Index";
}

@Styles.Render("~/Content/muzartcompose")


<div class="player row">
    <div class="col-md-12">
        <div class="input-group input-group-lg bpm pull-left">
            <span class="input-group-addon" id="sizing-addon1">BPM</span>
            <input type="number" data-bind="value: player.bpm" class="form-control" placeholder="Enter a number" aria-describedby="sizing-addon1">
        </div>
        <div class="btn-group player-buttons" role="group" aria-label="...">
            <button type="button" class="btn btn-lg btn-default btn-play" data-bind="click: playToggle"><i class="fa" data-bind="css: { 'fa-play': !player.isPlaying(), 'fa-pause': player.isPlaying() }"></i></button>
            <button type="button" class="btn btn-lg btn-default" data-bind="click: player.stop"><i class="fa fa-fw fa-stop"></i></button>
            <button type="button" class="btn btn-lg btn-default" data-bind="click: player.loopToggle, css: {active: player.doLoop}"><i class="fa fa-fw fa-repeat"></i></button>  
        </div>  
        <span class="timer" data-bind="text: player.playTime">adfs</span>
    </div>
    <div class="col-md-3">
        
    </div>  
</div>

<!--Snap Width: <span data-bind="text:snapLengthText"></span>
    <input class="" type="range" min="3" max="5" data-bind="value: gridState.snapMode" /> -->

    

<div class="row tracks-container">
    <div class="col-xs-2 col-reset">
        <div class="tracks-header">
            <input class="zoomrange" type="range" min="1" max="6" step="any" data-bind="value: gridState.zoomLevel, valueUpdate: 'input'" />
        </div>
        <!-- ko foreach: tracks -->
	    <div class="instrument">
            <button class="btn btn-link" data-bind="click: $parent.removeTrack" ><i class="fa fa-remove"></i></button>
            <div class="btn-group" role="group" aria-label="...">
                <button type="button" class="btn btn-xs btn-default"><i class="fa fa-fw fa-headphones"></i></button>
                <button type="button" class="btn btn-xs btn-default"><i class="fa fa-fw fa-volume-off"></i></button>
            </div>
            <select class="form-control" data-bind="options: $root.instruments, value: instrument"></select>
	    </div>
        <!-- /ko -->
    </div>
    <div class="col-xs-10 col-reset">
        <div class="tracks-header"></div>
        <div class="canvasgrid" oncontextmenu="return false;">
            <!-- ko foreach: tracks -->
	        <div class="shelf"></div>
            <!-- /ko -->
            <!-- ko foreach: canvases -->
            <div class="canvas" data-bind="selectGridElement: $root.gridState.gridSnapWidth, css: { 'is-selected': isSelected }">
                <svg height="100%" width="100%">
                    <!-- foreach notes -->
                    <line x1="20%" y1="10%" x2="50%" y2="10%" style="stroke:rgb(150,150,150);stroke-width:2" /> 
                    <line x1="18%" y1="30%" x2="20%" y2="30%" style="stroke:rgb(150,150,150);stroke-width:2" /> 
                    <line x1="30%" y1="50%" x2="40%" y2="50%" style="stroke:rgb(150,150,150);stroke-width:2" /> 
                </svg>
            </div>
            <!-- /ko -->
            <div class="box-select" data-bind="boxSelect: selection.onBoxSelect"></div>
        </div>
    </div>   
</div>

<button class="btn btn-default" data-bind="click: addTrack"><i class="fa fa-plus"></i> Add Track</button>

<piano-roll params="model: $root.pianoRoll"></piano-roll>

@section Scripts {
    @Scripts.Render("~/bundles/midi")
    @Scripts.Render("~/bundles/muzartcompose")
<script>
    //TODO: move all piano roll stuff into Piano roll component
    $(function () {
        $(document).mousedown(function (e) {
            if (e.which === 3) Muzart.inputs.mouseRight = true;
            if (e.which === 1) Muzart.inputs.mouseLeft = true;
        });
        $(document).mouseup(function (e) {
            if (e.which === 3) Muzart.inputs.mouseRight = false;
            if (e.which === 1) Muzart.inputs.mouseLeft = false;
        });
        $(document).on('keyup keydown', function (e) { Muzart.inputs.shift(e.shiftKey); });
        $(document).on('keyup keydown', function (e) { Muzart.inputs.ctrl(e.ctrlKey); });
        $(document).on('keyup keydown', function (e) { Muzart.inputs.alt(e.altKey); });

        $(document).bind('keydown', 'ctrl+a', viewModel.selection.selectAll);
        $(document).bind('keydown', 'ctrl+d', viewModel.selection.deselectAll);
        $(document).bind('keydown', 'del', viewModel.selection.deleteSelection);
        $(document).bind('keydown', 'backspace', viewModel.selection.deleteSelection);
        $(document).bind('keydown', 'ctrl+c', viewModel.selection.copySelection);
        $(document).bind('keydown', 'ctrl+x', viewModel.selection.cutSelection);
        $(document).bind('keydown', 'ctrl+v', viewModel.selection.pasteSelection);
        $(document).bind('keydown', 'space', viewModel.playToggle);

        MIDI.loadPlugin({
            soundfontUrl: '@Url.Content("~/Content/Muzart/soundfont/")',
            instrument: "acoustic_grand_piano", //acoustic_grand_piano
            onprogress: function (state, progress) {
                console.log(state, progress);
            },
            onsuccess: function () {
                viewModel.midiLoaded(true);
            }
        });
    });
    var viewModel = new Muzart.ComposeModel();

    ko.applyBindings(viewModel);
</script>
}
